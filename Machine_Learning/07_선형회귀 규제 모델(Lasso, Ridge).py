{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f99b0557",
   "metadata": {},
   "source": [
    "## 보스턴 데이터 로딩"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3d30d97c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6681427f",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.\n",
      "\n",
      "    The Boston housing prices dataset has an ethical problem. You can refer to\n",
      "    the documentation of this function for further details.\n",
      "\n",
      "    The scikit-learn maintainers therefore strongly discourage the use of this\n",
      "    dataset unless the purpose of the code is to study and educate about\n",
      "    ethical issues in data science and machine learning.\n",
      "\n",
      "    In this special case, you can fetch the dataset from the original\n",
      "    source::\n",
      "\n",
      "        import pandas as pd\n",
      "        import numpy as np\n",
      "\n",
      "\n",
      "        data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n",
      "        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n",
      "        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n",
      "        target = raw_df.values[1::2, 2]\n",
      "\n",
      "    Alternative datasets include the California housing dataset (i.e.\n",
      "    :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing\n",
      "    dataset. You can load the datasets as follows::\n",
      "\n",
      "        from sklearn.datasets import fetch_california_housing\n",
      "        housing = fetch_california_housing()\n",
      "\n",
      "    for the California housing dataset and::\n",
      "\n",
      "        from sklearn.datasets import fetch_openml\n",
      "        housing = fetch_openml(name=\"house_prices\", as_frame=True)\n",
      "\n",
      "    for the Ames housing dataset.\n",
      "    \n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "boston = load_boston()\n",
    "df = pd.DataFrame(boston.data, columns=boston.feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b70811aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(df, boston.target,\n",
    "                                                random_state=727,\n",
    "                                                test_size=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0993be4",
   "metadata": {},
   "source": [
    "## 컬럼 증식\n",
    "- 릿지, 라쏘는 선형회귀 모델이 과대적합인 경우에 사용하는 모델이다.\n",
    "- 선형회귀 모델이 과대적합이 되도록 다항회귀 데이터를 만들어보겠다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23ff1031",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',\n",
       "       'PTRATIO', 'B', 'LSTAT'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "col_names = X_train.columns\n",
    "col_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d1c16601",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n",
      "C:\\Users\\AI\\AppData\\Local\\Temp\\ipykernel_5676\\4102070932.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]\n"
     ]
    }
   ],
   "source": [
    "for c in col_names :\n",
    "    for c2 in col_names :\n",
    "        X_train[c+\" x \"+c2] = X_train[c] * X_train[c2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1f2a23d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(404, 182)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e16a8e6",
   "metadata": {},
   "source": [
    "## 모델학습"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c7de52a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Lasso # L1 규제모델\n",
    "from sklearn.linear_model import Ridge # L2 규제모델\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bad4dd44",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LinearRegression 점수 : 0.7946879109399452\n",
      "LinearRegression 점수(train) : 0.933171164250107\n",
      "Lasso 점수 : 0.822381478807786\n",
      "Lasso 점수(train) : 0.8859789446114941\n",
      "Ridge 점수 : 0.7834663589110872\n",
      "Ridge 점수(train) : 0.9272567648673558\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.830e+03, tolerance: 2.777e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.311e+03, tolerance: 2.418e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.675e+03, tolerance: 2.539e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.679e+03, tolerance: 2.876e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.842e+03, tolerance: 2.934e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.169e+03, tolerance: 3.387e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    }
   ],
   "source": [
    "# 선형회귀모델\n",
    "linear = LinearRegression()\n",
    "linear_score = cross_val_score(linear,X_train,y_train,cv=5)\n",
    "# Lasso 모델\n",
    "lasso = Lasso()\n",
    "lasso_score = cross_val_score(lasso,X_train,y_train,cv=5)\n",
    "# Ridge 모델\n",
    "ridge = Ridge()\n",
    "ridge_score = cross_val_score(ridge,X_train,y_train,cv=5)\n",
    "\n",
    "linear.fit(X_train,y_train)\n",
    "lasso.fit(X_train,y_train)\n",
    "ridge.fit(X_train,y_train)\n",
    "\n",
    "print(\"LinearRegression 점수 :\",linear_score.mean())\n",
    "print(\"LinearRegression 점수(train) :\",linear.score(X_train,y_train))\n",
    "print(\"Lasso 점수 :\",lasso_score.mean())\n",
    "print(\"Lasso 점수(train) :\",lasso.score(X_train,y_train))\n",
    "print(\"Ridge 점수 :\",ridge_score.mean())\n",
    "print(\"Ridge 점수(train) :\",ridge.score(X_train,y_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a255fb4f",
   "metadata": {},
   "source": [
    "## 모델 튜닝"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7acafad",
   "metadata": {},
   "source": [
    "### Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "127ec175",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.032e+03, tolerance: 2.777e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.116e+02, tolerance: 2.418e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.024e+03, tolerance: 2.539e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.419e+02, tolerance: 2.876e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.109e+03, tolerance: 2.934e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.172e+03, tolerance: 2.777e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.777e+02, tolerance: 2.418e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.139e+03, tolerance: 2.539e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.075e+03, tolerance: 2.876e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.211e+03, tolerance: 2.934e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.482e+03, tolerance: 2.777e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.980e+02, tolerance: 2.418e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.371e+03, tolerance: 2.539e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.379e+03, tolerance: 2.876e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.464e+03, tolerance: 2.934e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.830e+03, tolerance: 2.777e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.311e+03, tolerance: 2.418e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.675e+03, tolerance: 2.539e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.679e+03, tolerance: 2.876e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.842e+03, tolerance: 2.934e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.168e+03, tolerance: 2.777e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.599e+03, tolerance: 2.418e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.928e+03, tolerance: 2.539e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.186e+03, tolerance: 2.876e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.159e+03, tolerance: 2.934e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.206e+02, tolerance: 2.777e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.873e+00, tolerance: 2.418e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.719e+00, tolerance: 2.876e+00\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    }
   ],
   "source": [
    "# 규제 파라미터 값을 작은 값 -> 큰 값\n",
    "lasso_score = []\n",
    "for a in [0.001,0.01,0.1,1,10,100,1000]:\n",
    "    m = Lasso(alpha=a)\n",
    "    rs = cross_val_score(m, X_train,y_train, cv=5)\n",
    "    lasso_score.append(rs.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fb85307",
   "metadata": {},
   "source": [
    "### Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fb1c937b",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_ridge.py:157: LinAlgWarning: Ill-conditioned matrix (rcond=5.0543e-17): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, sym_pos=True, overwrite_a=True).T\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_ridge.py:157: LinAlgWarning: Ill-conditioned matrix (rcond=4.89667e-17): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, sym_pos=True, overwrite_a=True).T\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_ridge.py:157: LinAlgWarning: Ill-conditioned matrix (rcond=4.87021e-17): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, sym_pos=True, overwrite_a=True).T\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_ridge.py:157: LinAlgWarning: Ill-conditioned matrix (rcond=4.56326e-17): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, sym_pos=True, overwrite_a=True).T\n",
      "C:\\Users\\AI\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_ridge.py:157: LinAlgWarning: Ill-conditioned matrix (rcond=4.96073e-17): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, sym_pos=True, overwrite_a=True).T\n"
     ]
    }
   ],
   "source": [
    "# 규제 파라미터 값을 작은 값 -> 큰 값\n",
    "ridge_score = []\n",
    "for a in [0.001,0.01,0.1,1,10,100,1000]:\n",
    "    m = Ridge(alpha=a)\n",
    "    rs = cross_val_score(m, X_train,y_train, cv=5)\n",
    "    ridge_score.append(rs.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "861f91ff",
   "metadata": {},
   "source": [
    "### 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "253a7272",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "63ecef95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5)) # 가로,세로 비율\n",
    "plt.plot(lasso_score, label='Lasso')\n",
    "plt.plot(ridge_score, label='Ridge')\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('R square score')\n",
    "plt.xticks(range(7),['0.001','0.01','0.1','1','10','100','1000'])\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31feb282",
   "metadata": {},
   "source": [
    "### 가중치 값 확인하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1f6e50c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "cols = X_train.columns # 182개의 컬럼이름 가져오기\n",
    "# 모델생성\n",
    "lasso = Lasso(alpha=1000)\n",
    "ridge = Ridge(alpha=1000)\n",
    "#모델학습\n",
    "lasso.fit(X_train,y_train)\n",
    "ridge.fit(X_train,y_train)\n",
    "#가중치 가져오기\n",
    "lasso_coef = lasso.coef_\n",
    "ridge_coef = ridge.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3f7c27b6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lasso</th>\n",
       "      <th>ridge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.234809e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-5.033582e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>6.304783e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-8.386286e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.142368e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.602003e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.211991e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-6.122724e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.920124e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>6.453845e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.052289e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.280322e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>7.330037e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.296138e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.699899e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>2.738351e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.604709e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-9.639726e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x RM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.935128e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x AGE</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-4.392050e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-5.799447e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x RAD</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-3.154298e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x TAX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.672760e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.599010e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x B</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>9.833947e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CRIM x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.366723e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x CRIM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.699899e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.162637e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>6.242979e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.782172e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x NOX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-6.728531e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.176960e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x AGE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.968722e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.338538e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000508e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x TAX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>2.892362e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>9.062151e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x B</th>\n",
       "      <td>0.000032</td>\n",
       "      <td>-6.517845e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-3.725568e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>2.738351e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x ZN</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>6.242979e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>2.100222e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.829228e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.346727e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x RM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.054558e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x AGE</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.257473e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.172787e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.031611e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x TAX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.204247e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.571829e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x B</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.989192e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.342701e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x CRIM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.604709e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.782172e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x INDUS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.829228e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-8.386286e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x NOX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.563300e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.631744e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x AGE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.581632e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x DIS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.505309e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.763680e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x TAX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.729545e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x PTRATIO</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.079843e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x B</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.233708e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS x LSTAT</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.574602e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-9.639726e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-6.728531e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.346727e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.563300e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.127380e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.051511e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x AGE</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>7.760020e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.845565e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.803860e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x TAX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.560598e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.071314e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x B</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.054594e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.116940e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.935128e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.176960e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.054558e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.631744e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x NOX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.051511e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.838081e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x AGE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.581162e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.172448e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-6.961941e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x TAX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-7.111037e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x PTRATIO</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.986696e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x B</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.795116e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-4.769329e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-4.392050e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.968722e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.257473e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.581632e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>7.760020e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.581162e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x AGE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.345145e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>6.667557e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.592268e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x TAX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.152270e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.753266e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x B</th>\n",
       "      <td>0.000111</td>\n",
       "      <td>-4.419790e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.586671e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-5.799447e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x ZN</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.338538e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.172787e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.505309e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>4.845565e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x RM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.172448e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x AGE</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>6.667557e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.330709e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x RAD</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.339250e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x TAX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.791167e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.974543e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x B</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.209640e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.985073e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-3.154298e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x ZN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000508e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x INDUS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.031611e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.763680e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x NOX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.803860e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-6.961941e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x AGE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.592268e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.339250e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.053151e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x TAX</th>\n",
       "      <td>0.000130</td>\n",
       "      <td>2.206673e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x PTRATIO</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.939057e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x B</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.302972e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.745908e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.672760e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x ZN</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>2.892362e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x INDUS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.204247e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.729545e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.560598e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-7.111037e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x AGE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.152270e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.791167e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.206673e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x TAX</th>\n",
       "      <td>0.000018</td>\n",
       "      <td>-3.267730e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x PTRATIO</th>\n",
       "      <td>-0.001000</td>\n",
       "      <td>3.079417e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x B</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.483761e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX x LSTAT</th>\n",
       "      <td>-0.000306</td>\n",
       "      <td>-1.070066e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.599010e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x ZN</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>9.062151e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.571829e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.079843e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.071314e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.986696e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x AGE</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.753266e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.974543e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.939057e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x TAX</th>\n",
       "      <td>-0.000173</td>\n",
       "      <td>3.079417e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-4.166487e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x B</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.016127e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO x LSTAT</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.858749e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>9.833947e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x ZN</th>\n",
       "      <td>0.000094</td>\n",
       "      <td>-6.517845e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.989192e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.233708e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x NOX</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.054594e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x RM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.795116e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x AGE</th>\n",
       "      <td>0.000064</td>\n",
       "      <td>-4.419790e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-2.209640e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x RAD</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.302972e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x TAX</th>\n",
       "      <td>0.000008</td>\n",
       "      <td>1.483761e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.016127e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x B</th>\n",
       "      <td>0.000054</td>\n",
       "      <td>3.088562e-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B x LSTAT</th>\n",
       "      <td>-0.001905</td>\n",
       "      <td>-3.168540e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x CRIM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.366723e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x ZN</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-3.725568e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x INDUS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.342701e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x CHAS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.574602e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.116940e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x RM</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-4.769329e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x AGE</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.586671e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x DIS</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1.985073e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x RAD</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.745908e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x TAX</th>\n",
       "      <td>-0.000013</td>\n",
       "      <td>-1.070066e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x PTRATIO</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.858749e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x B</th>\n",
       "      <td>-0.000004</td>\n",
       "      <td>-3.168540e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT x LSTAT</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.632099e-02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      lasso         ridge\n",
       "CRIM              -0.000000  1.234809e-03\n",
       "ZN                 0.000000 -5.033582e-02\n",
       "INDUS             -0.000000  6.304783e-03\n",
       "CHAS               0.000000 -8.386286e-04\n",
       "NOX               -0.000000  1.142368e-03\n",
       "RM                 0.000000  1.602003e-02\n",
       "AGE                0.000000  6.211991e-03\n",
       "DIS               -0.000000 -6.122724e-03\n",
       "RAD                0.000000  7.920124e-03\n",
       "TAX               -0.000000  6.453845e-04\n",
       "PTRATIO           -0.000000 -1.052289e-02\n",
       "B                  0.000000  6.280322e-02\n",
       "LSTAT             -0.000000  7.330037e-03\n",
       "CRIM x CRIM       -0.000000  3.296138e-03\n",
       "CRIM x ZN          0.000000  5.699899e-02\n",
       "CRIM x INDUS      -0.000000  2.738351e-02\n",
       "CRIM x CHAS        0.000000  3.604709e-02\n",
       "CRIM x NOX        -0.000000 -9.639726e-03\n",
       "CRIM x RM         -0.000000  4.935128e-02\n",
       "CRIM x AGE        -0.000000 -4.392050e-03\n",
       "CRIM x DIS        -0.000000 -5.799447e-02\n",
       "CRIM x RAD        -0.000000 -3.154298e-02\n",
       "CRIM x TAX        -0.000000  1.672760e-04\n",
       "CRIM x PTRATIO    -0.000000  1.599010e-03\n",
       "CRIM x B          -0.000000  9.833947e-05\n",
       "CRIM x LSTAT      -0.000000  5.366723e-03\n",
       "ZN x CRIM          0.000000  5.699899e-02\n",
       "ZN x ZN            0.000000 -1.162637e-04\n",
       "ZN x INDUS        -0.000000  6.242979e-04\n",
       "ZN x CHAS          0.000000  7.782172e-03\n",
       "ZN x NOX           0.000000 -6.728531e-03\n",
       "ZN x RM            0.000000  3.176960e-02\n",
       "ZN x AGE           0.000000  6.968722e-05\n",
       "ZN x DIS          -0.000000  3.338538e-04\n",
       "ZN x RAD           0.000000 -1.000508e-03\n",
       "ZN x TAX          -0.000000  2.892362e-04\n",
       "ZN x PTRATIO      -0.000000  9.062151e-04\n",
       "ZN x B             0.000032 -6.517845e-04\n",
       "ZN x LSTAT        -0.000000 -3.725568e-03\n",
       "INDUS x CRIM      -0.000000  2.738351e-02\n",
       "INDUS x ZN        -0.000000  6.242979e-04\n",
       "INDUS x INDUS     -0.000000  2.100222e-02\n",
       "INDUS x CHAS       0.000000 -2.829228e-02\n",
       "INDUS x NOX       -0.000000  1.346727e-02\n",
       "INDUS x RM        -0.000000  1.054558e-02\n",
       "INDUS x AGE       -0.000000  4.257473e-03\n",
       "INDUS x DIS       -0.000000  4.172787e-03\n",
       "INDUS x RAD        0.000000  1.031611e-02\n",
       "INDUS x TAX        0.000000  2.204247e-04\n",
       "INDUS x PTRATIO   -0.000000 -2.571829e-02\n",
       "INDUS x B         -0.000000 -2.989192e-04\n",
       "INDUS x LSTAT     -0.000000 -1.342701e-02\n",
       "CHAS x CRIM        0.000000  3.604709e-02\n",
       "CHAS x ZN          0.000000  7.782172e-03\n",
       "CHAS x INDUS       0.000000 -2.829228e-02\n",
       "CHAS x CHAS        0.000000 -8.386286e-04\n",
       "CHAS x NOX         0.000000 -2.563300e-03\n",
       "CHAS x RM          0.000000 -3.631744e-02\n",
       "CHAS x AGE         0.000000  1.581632e-02\n",
       "CHAS x DIS         0.000000  9.505309e-03\n",
       "CHAS x RAD         0.000000  3.763680e-02\n",
       "CHAS x TAX         0.000000 -2.729545e-03\n",
       "CHAS x PTRATIO     0.000000  1.079843e-02\n",
       "CHAS x B           0.000000 -2.233708e-04\n",
       "CHAS x LSTAT       0.000000  2.574602e-02\n",
       "NOX x CRIM        -0.000000 -9.639726e-03\n",
       "NOX x ZN           0.000000 -6.728531e-03\n",
       "NOX x INDUS       -0.000000  1.346727e-02\n",
       "NOX x CHAS         0.000000 -2.563300e-03\n",
       "NOX x NOX         -0.000000  1.127380e-03\n",
       "NOX x RM           0.000000  1.051511e-02\n",
       "NOX x AGE         -0.000000  7.760020e-03\n",
       "NOX x DIS         -0.000000  4.845565e-03\n",
       "NOX x RAD          0.000000 -1.803860e-02\n",
       "NOX x TAX         -0.000000 -2.560598e-02\n",
       "NOX x PTRATIO     -0.000000  5.071314e-03\n",
       "NOX x B            0.000000  3.054594e-03\n",
       "NOX x LSTAT       -0.000000  5.116940e-02\n",
       "RM x CRIM         -0.000000  4.935128e-02\n",
       "RM x ZN            0.000000  3.176960e-02\n",
       "RM x INDUS        -0.000000  1.054558e-02\n",
       "RM x CHAS          0.000000 -3.631744e-02\n",
       "RM x NOX           0.000000  1.051511e-02\n",
       "RM x RM            0.000000  1.838081e-01\n",
       "RM x AGE           0.000000  2.581162e-02\n",
       "RM x DIS          -0.000000  3.172448e-02\n",
       "RM x RAD           0.000000 -6.961941e-02\n",
       "RM x TAX           0.000000 -7.111037e-03\n",
       "RM x PTRATIO       0.000000  3.986696e-02\n",
       "RM x B             0.000000  5.795116e-03\n",
       "RM x LSTAT        -0.000000 -4.769329e-02\n",
       "AGE x CRIM        -0.000000 -4.392050e-03\n",
       "AGE x ZN           0.000000  6.968722e-05\n",
       "AGE x INDUS       -0.000000  4.257473e-03\n",
       "AGE x CHAS         0.000000  1.581632e-02\n",
       "AGE x NOX         -0.000000  7.760020e-03\n",
       "AGE x RM           0.000000  2.581162e-02\n",
       "AGE x AGE          0.000000 -1.345145e-04\n",
       "AGE x DIS         -0.000000  6.667557e-03\n",
       "AGE x RAD          0.000000  4.592268e-03\n",
       "AGE x TAX          0.000000 -1.152270e-04\n",
       "AGE x PTRATIO     -0.000000 -2.753266e-03\n",
       "AGE x B            0.000111 -4.419790e-04\n",
       "AGE x LSTAT       -0.000000 -1.586671e-03\n",
       "DIS x CRIM        -0.000000 -5.799447e-02\n",
       "DIS x ZN          -0.000000  3.338538e-04\n",
       "DIS x INDUS       -0.000000  4.172787e-03\n",
       "DIS x CHAS         0.000000  9.505309e-03\n",
       "DIS x NOX         -0.000000  4.845565e-03\n",
       "DIS x RM          -0.000000  3.172448e-02\n",
       "DIS x AGE         -0.000000  6.667557e-03\n",
       "DIS x DIS         -0.000000  1.330709e-01\n",
       "DIS x RAD         -0.000000 -1.339250e-02\n",
       "DIS x TAX         -0.000000 -1.791167e-03\n",
       "DIS x PTRATIO     -0.000000 -2.974543e-02\n",
       "DIS x B           -0.000000 -2.209640e-03\n",
       "DIS x LSTAT       -0.000000  1.985073e-02\n",
       "RAD x CRIM        -0.000000 -3.154298e-02\n",
       "RAD x ZN           0.000000 -1.000508e-03\n",
       "RAD x INDUS        0.000000  1.031611e-02\n",
       "RAD x CHAS         0.000000  3.763680e-02\n",
       "RAD x NOX          0.000000 -1.803860e-02\n",
       "RAD x RM           0.000000 -6.961941e-02\n",
       "RAD x AGE          0.000000  4.592268e-03\n",
       "RAD x DIS         -0.000000 -1.339250e-02\n",
       "RAD x RAD          0.000000 -1.053151e-01\n",
       "RAD x TAX          0.000130  2.206673e-03\n",
       "RAD x PTRATIO      0.000000  2.939057e-02\n",
       "RAD x B            0.000000 -3.302972e-04\n",
       "RAD x LSTAT       -0.000000 -1.745908e-02\n",
       "TAX x CRIM        -0.000000  1.672760e-04\n",
       "TAX x ZN          -0.000000  2.892362e-04\n",
       "TAX x INDUS        0.000000  2.204247e-04\n",
       "TAX x CHAS         0.000000 -2.729545e-03\n",
       "TAX x NOX         -0.000000 -2.560598e-02\n",
       "TAX x RM           0.000000 -7.111037e-03\n",
       "TAX x AGE          0.000000 -1.152270e-04\n",
       "TAX x DIS         -0.000000 -1.791167e-03\n",
       "TAX x RAD          0.000000  2.206673e-03\n",
       "TAX x TAX          0.000018 -3.267730e-05\n",
       "TAX x PTRATIO     -0.001000  3.079417e-03\n",
       "TAX x B            0.000000  1.483761e-05\n",
       "TAX x LSTAT       -0.000306 -1.070066e-04\n",
       "PTRATIO x CRIM    -0.000000  1.599010e-03\n",
       "PTRATIO x ZN      -0.000000  9.062151e-04\n",
       "PTRATIO x INDUS   -0.000000 -2.571829e-02\n",
       "PTRATIO x CHAS     0.000000  1.079843e-02\n",
       "PTRATIO x NOX     -0.000000  5.071314e-03\n",
       "PTRATIO x RM       0.000000  3.986696e-02\n",
       "PTRATIO x AGE     -0.000000 -2.753266e-03\n",
       "PTRATIO x DIS     -0.000000 -2.974543e-02\n",
       "PTRATIO x RAD      0.000000  2.939057e-02\n",
       "PTRATIO x TAX     -0.000173  3.079417e-03\n",
       "PTRATIO x PTRATIO -0.000000 -4.166487e-02\n",
       "PTRATIO x B       -0.000000 -1.016127e-03\n",
       "PTRATIO x LSTAT   -0.000000  5.858749e-03\n",
       "B x CRIM          -0.000000  9.833947e-05\n",
       "B x ZN             0.000094 -6.517845e-04\n",
       "B x INDUS         -0.000000 -2.989192e-04\n",
       "B x CHAS           0.000000 -2.233708e-04\n",
       "B x NOX            0.000000  3.054594e-03\n",
       "B x RM             0.000000  5.795116e-03\n",
       "B x AGE            0.000064 -4.419790e-04\n",
       "B x DIS           -0.000000 -2.209640e-03\n",
       "B x RAD            0.000000 -3.302972e-04\n",
       "B x TAX            0.000008  1.483761e-05\n",
       "B x PTRATIO       -0.000000 -1.016127e-03\n",
       "B x B              0.000054  3.088562e-07\n",
       "B x LSTAT         -0.001905 -3.168540e-05\n",
       "LSTAT x CRIM      -0.000000  5.366723e-03\n",
       "LSTAT x ZN        -0.000000 -3.725568e-03\n",
       "LSTAT x INDUS     -0.000000 -1.342701e-02\n",
       "LSTAT x CHAS       0.000000  2.574602e-02\n",
       "LSTAT x NOX       -0.000000  5.116940e-02\n",
       "LSTAT x RM        -0.000000 -4.769329e-02\n",
       "LSTAT x AGE       -0.000000 -1.586671e-03\n",
       "LSTAT x DIS       -0.000000  1.985073e-02\n",
       "LSTAT x RAD       -0.000000 -1.745908e-02\n",
       "LSTAT x TAX       -0.000013 -1.070066e-04\n",
       "LSTAT x PTRATIO   -0.000000  5.858749e-03\n",
       "LSTAT x B         -0.000004 -3.168540e-05\n",
       "LSTAT x LSTAT      0.000000  2.632099e-02"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_rows',200) # pandas 최대 rows 증가\n",
    "coef_df = pd.DataFrame([lasso_coef,ridge_coef],\n",
    "                      columns=cols,\n",
    "                      index=['lasso','ridge']).T\n",
    "\n",
    "coef_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc363bfc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b51c3082",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e1a0b84",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "762a8cd2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec6f72c2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "252672b7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41611252",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adbfb03c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e668bc94",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29a48caa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07249d82",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c830270",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74f0d145",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c0178d8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66a746ba",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "894db329",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48ea8750",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e4a36b9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d45405ed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a7817f6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8d695f2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f22302f4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6ff66c5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e7718ef",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d443387c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1409e832",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88f10446",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62caf4a1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "307.2px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
